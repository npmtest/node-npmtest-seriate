{"/home/travis/build/npmtest/node-npmtest-seriate/test.js":"/* istanbul instrument in package npmtest_seriate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-seriate/lib.npmtest_seriate.js":"/* istanbul instrument in package npmtest_seriate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_seriate = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_seriate = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-seriate/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-seriate && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_seriate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_seriate\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_seriate.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_seriate.rollup.js'] =\n            local.assetsDict['/assets.npmtest_seriate.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_seriate.__dirname + '/lib.npmtest_seriate.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-seriate/node_modules/seriate/src/index.js":"var when = require( \"when\" );\nvar _ = require( \"lodash\" );\nvar Monologue = require( \"monologue.js\" ).prototype;\nvar sql = require( \"mssql\" );\nvar connections = require( \"./connections\" );\nvar SqlContext = require( \"./sqlContext\" )();\nvar TransactionContext = require( \"./transactionContext\" )( SqlContext );\nvar utils = require( \"./utils\" );\n\nfunction promisify( context, queryOptions ) {\n\tvar name = queryOptions.name || queryOptions.procedure || \"__result__\";\n\tcontext.step( name, queryOptions );\n\treturn when.promise( function( resolve, reject, notify ) {\n\t\tcontext\n\t\t\t.end( resolve )\n\t\t\t.error( reject )\n\t\t\t.on( \"data\", notify );\n\t} );\n}\n\nvar seriate = {\n\tgetTransactionContext: function( connection ) {\n\t\tvar options = { metrics: this.metrics, namespace: this.metricsNamespace };\n\t\tif ( connection && connection.isolationLevel ) {\n\t\t\toptions.isolationLevel = connection.isolationLevel;\n\t\t\tdelete connection.isolationLevel;\n\t\t}\n\t\toptions.connection = connections.get( connection );\n\t\treturn new TransactionContext( options );\n\t},\n\tgetPlainContext: function( connection ) {\n\t\tvar conn = connections.get( connection );\n\t\tvar options = { metrics: this.metrics, namespace: this.metricsNamespace, connection: conn };\n\t\treturn new SqlContext( options );\n\t},\n\texecuteTransaction: function( connection, queryOptions ) {\n\t\tif ( arguments.length === 1 ) {\n\t\t\tqueryOptions = connection;\n\t\t\tconnection = undefined;\n\t\t}\n\t\tvar conn = connections.get( connection );\n\t\tvar options = { metrics: this.metrics, namespace: this.metricsNamespace, connection: conn };\n\t\treturn promisify( new TransactionContext( options ), queryOptions );\n\t},\n\texecute: function( connection, queryOptions ) {\n\t\tif ( arguments.length === 1 ) {\n\t\t\tqueryOptions = connection;\n\t\t\tconnection = undefined;\n\t\t}\n\t\tvar conn = connections.get( connection );\n\t\tvar options = { metrics: this.metrics, namespace: this.metricsNamespace, connection: conn };\n\t\treturn promisify( new SqlContext( options ), queryOptions )\n\t\t\t.then( function( data ) {\n\t\t\t\tif ( data.__result__ ) {\n\t\t\t\t\treturn data.__result__;\n\t\t\t\t} else {\n\t\t\t\t\treturn data[ queryOptions.procedure || queryOptions.name ];\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tfirst: function() {\n\t\tvar args = Array.prototype.slice.call( arguments, 0 );\n\t\tdelete args[ args.length - 1 ].stream;\n\t\treturn this.execute.apply( this, args ).then( function( rows ) {\n\t\t\treturn rows[ 0 ];\n\t\t} );\n\t},\n\tfromFile: utils.fromFile,\n\taddConnection: function( config ) {\n\t\tconnections.add( config );\n\t},\n\tsetDefaultConfig: function( config ) {\n\t\tconfig.name = \"default\";\n\t\tconnections.add( config );\n\t},\n\tsetDefault: function( config ) {\n\t\tconfig.name = \"default\";\n\t\tconnections.add( config );\n\t},\n\tcloseConnection: function( config ) {\n\t\tconnections.close( config );\n\t},\n\tresetConnections: function() {\n\t\tconnections.reset();\n\t},\n\tuseMetrics: function( metrics, namespace ) {\n\t\tthis.metrics = metrics;\n\t\tthis.metricsNamespace = namespace;\n\t}\n};\n\n_.each( sql.TYPES, function( val, key ) {\n\tseriate[ key ] = sql.TYPES[ key ];\n\tseriate[ key.toUpperCase() ] = sql.TYPES[ key ];\n} );\n\n_.each( sql.ISOLATION_LEVEL, function( val, key ) {\n\tseriate[ key ] = sql.ISOLATION_LEVEL[ key ];\n} );\n\nseriate.MAX = sql.MAX;\n\nvar api = _.assign( seriate, Monologue );\n\nconnections.on( \"connected\", function( info ) {\n\tapi.emit( \"connected\", info );\n} );\n\nconnections.on( \"closed\", function( info ) {\n\tapi.emit( \"closed\", info );\n} );\n\nconnections.on( \"failed\", function( info ) {\n\tapi.emit( \"failed\", info );\n} );\n\nmodule.exports = api;\n","/home/travis/build/npmtest/node-npmtest-seriate/node_modules/seriate/src/connections.js":"var _ = require( \"lodash\" );\nvar when = require( \"when\" );\nvar sql = require( \"mssql\" );\nvar Monologue = require( \"monologue.js\" ).prototype;\nvar log = require( \"./log\" )( \"seriate.connection\" );\n\nvar state = {\n\tpools: {},\n\tconnections: {},\n\tconfigurations: {},\n\taliases: {}\n};\n\nvar api = _.assign( {\n\tstate: state,\n\tadd: addConnection,\n\tclose: closeConnection,\n\tget: getConnection,\n\treset: resetState\n}, Monologue );\n\nfunction addConnection( config ) {\n\tvar name = getName( config );\n\tvar original = getConfiguration( name );\n\tvar alias = getAlias( config );\n\tif ( alias !== name && !state.aliases[ alias ] ) {\n\t\tstate.aliases[ alias ] = name;\n\t}\n\tif ( config.host ) {\n\t\tconfig.server = config.host;\n\t}\n\tif ( name === \"default\" || !original ) {\n\t\tstate.configurations[ name ] = config;\n\t\treturn connect( name, config );\n\t} else if ( alias === getAlias( original ) ) {\n\t\treturn getConnection( config );\n\t}\n}\n\nfunction closeConnection( config ) {\n\tvar name = getName( config );\n\tvar pool = state.pools[ name ];\n\n\tif ( pool ) {\n\t\tpool.close();\n\t}\n}\n\nfunction connect( name, config ) {\n\tvar pool = getPool( name );\n\tif ( pool ) {\n\t\tlog.warn( \"Connection for \\\"%s\\\" that already exists - existing connection pool will be used.\", name );\n\t\treturn state.connections[ name ];\n\t}\n\tlog.info( \"Connecting to \\\"%s\\\" ( %s:%d - %s as %s )\",\n\t\tname,\n\t\tconfig.host || config.server,\n\t\tconfig.port || 1433,\n\t\tconfig.database,\n\t\tconfig.user );\n\tpool = state.pools[ name ] = new sql.Connection( config );\n\n\tpool.on( \"connect\", function() {\n\t\tapi.emit( \"connected\", { name: name } );\n\t\tlog.info( \"Connected to \\\"%s\\\"\", name );\n\t} );\n\n\tpool.on( \"close\", function() {\n\t\tapi.emit( \"closed\", { name: name } );\n\t\tlog.info( \"Closed connection to \\\"%s\\\"\", name );\n\t\tpool.removeAllListeners();\n\t\tdelete state.connections[ name ];\n\t\tdelete state.pools[ name ];\n\t} );\n\n\tfunction onConnectionError( err ) {\n\t\tapi.emit( \"failed\", { name: name, error: err } );\n\t\tlog.error( \"Failed to connection to \\\"%s\\\" with: %s\", name, err );\n\t\tdelete state.connections[ name ];\n\t\tdelete state.pools[ name ];\n\t\tpool.removeAllListeners();\n\t}\n\n\tpool.on( \"error\", onConnectionError );\n\n\tstate.pools[ name ] = pool;\n\tstate.connections[ name ] = pool.connect()\n\t\t.then( function() {\n\t\t\treturn pool;\n\t\t}, onConnectionError );\n\treturn state.connections[ name ];\n}\n\nfunction getConnection( config ) {\n\tvar name = getName( config );\n\tvar pool = state.pools[ name ];\n\tvar connection = state.connections[ name ];\n\tvar configuration = state.configurations[ name ];\n\tvar aliasedName = state.aliases[ name ];\n\tif ( !pool && !connection && aliasedName ) {\n\t\tname = aliasedName;\n\t\tpool = state.pools[ name ];\n\t\tconnection = state.connections[ name ];\n\t\tconfiguration = state.configurations[ name ];\n\t}\n\n\tif ( connection ) {\n\t\treturn connection;\n\t} else if ( pool ) {\n\t\tconnection = pool.connect()\n\t\t\t.then( function() {\n\t\t\t\treturn pool;\n\t\t\t} );\n\t\tstate.connections[ name ] = connection;\n\t\treturn connection;\n\t} else if ( configuration ) {\n\t\treturn connect( name, configuration );\n\t} else if ( config === undefined || _.isString( config ) ) {\n\t\treturn when.reject( new Error( \"No connection named \\\"\" + name + \"\\\" exists\" ) );\n\t} else {\n\t\treturn addConnection( config );\n\t}\n}\n\nfunction getConfiguration( name ) {\n\treturn state.configurations[ name ];\n}\n\nfunction getName( config ) {\n\tvar name;\n\tif ( config === undefined ) {\n\t\tname = \"default\";\n\t} else if ( _.isString( config ) ) {\n\t\tname = config;\n\t} else if ( config.name ) {\n\t\tname = config.name;\n\t} else {\n\t\tif ( getConfiguration( \"default\" ) ) {\n\t\t\tname = getAlias( config );\n\t\t} else {\n\t\t\tname = \"default\";\n\t\t}\n\t}\n\treturn name;\n}\n\nfunction getAlias( config ) {\n\treturn [ config.host || config.server, config.user, config.database, config.domain, config.port ].join( \"-\" );\n}\n\nfunction getPool( name ) {\n\treturn state.pools[ name ];\n}\n\nfunction resetState() {\n\tstate = {\n\t\tpools: {},\n\t\tconnections: {},\n\t\tconfigurations: {},\n\t\taliases: {}\n\t};\n}\n\nmodule.exports = api;\n","/home/travis/build/npmtest/node-npmtest-seriate/node_modules/seriate/src/log.js":"var _ = require( \"lodash\" );\nvar postal = require( \"postal\" );\nvar logFn = require( \"whistlepunk\" );\nvar logger = logFn( postal, {} );\nvar logs = {};\nvar topics = [];\n\nfunction configure( config ) {\n\tvar envDebug = !!process.env.DEBUG;\n\tif ( envDebug ) {\n\t\tlogger = logFn( postal, { adapters: { debug: { level: 5 } } } );\n\t} else {\n\t\tlogger = logFn( postal, config );\n\t}\n\n\t_.each( logs, function( log ) {\n\t\tlog.reset();\n\t} );\n\tlogs = {};\n\t_.each( topics, createLog );\n}\n\nfunction createLog( topic ) {\n\tif ( !_.contains( topics, topic ) && !logs[ topic ] ) {\n\t\tvar log = logger( topic );\n\t\tif ( logs[ topic ] ) {\n\t\t\tlogs[ topic ].reset();\n\t\t}\n\t\ttopics.push( log );\n\t\tlogs[ topic ] = log;\n\t\treturn log;\n\t} else {\n\t\treturn logs[ topic ];\n\t}\n}\n\nmodule.exports = function( config, ns ) {\n\tif ( typeof config === \"string\" ) {\n\t\tns = config;\n\t} else {\n\t\tconfigure( config );\n\t}\n\treturn ns ? createLog( ns ) : createLog;\n};\n","/home/travis/build/npmtest/node-npmtest-seriate/node_modules/seriate/src/sqlContext.js":"var _ = require( \"lodash\" );\nvar when = require( \"when\" );\nvar lift = require( \"when/node\" ).lift;\nvar sql = require( \"mssql\" );\nvar declare = require( \"mssql/lib/datatypes\" ).declare;\nvar util = require( \"util\" );\nvar utils = require( \"./utils\" );\nvar log = require( \"./log\" )( \"seriate.sql\" );\nvar Monologue = require( \"monologue.js\" );\nvar machina = require( \"machina\" );\nvar xmldom = require( \"xmldom\" );\nvar domImplementation = new xmldom.DOMImplementation();\nvar xmlSerializer = new xmldom.XMLSerializer();\nvar Readable = require( \"stream\" ).Readable;\n\nutil.inherits( DataResultStream, Readable );\n\nfunction DataResultStream( request, options ) {\n\tvar self = this;\n\tReadable.call( this, _.extend( {}, options, { objectMode: true } ) );\n\n\trequest.on( \"recordset\", function( columns ) {\n\t\tself.push( { recordset: columns } );\n\t} );\n\n\trequest.on( \"row\", function( row ) {\n\t\tself.push( { row: row } );\n\t} );\n\n\trequest.on( \"error\", function( error ) {\n\t\tself.emit( \"error\", error );\n\t} );\n\n\trequest.on( \"done\", function() {\n\t\tself.push( null );\n\t} );\n}\n\nDataResultStream.prototype._read = _.noop;\n\nfunction errorHandler( err ) {\n\tthis.err = err;\n\tthis.transition( \"error\" );\n}\n\nfunction buildTableVariableSql( key, schema ) {\n\treturn _.template( utils.fromFile( \"./sql/buildTableVar.sql.template\" ) )( {\n\t\tname: key,\n\t\tschema: _.mapValues( schema, function( typeDef ) {\n\t\t\tif ( _.isFunction( typeDef ) ) {\n\t\t\t\ttypeDef = typeDef();\n\t\t\t}\n\t\t\treturn declare( typeDef.type, typeDef );\n\t\t} )\n\t} ) + \"\\n\";\n}\n\nfunction toXml( values, schema ) {\n\tvar doc = domImplementation.createDocument();\n\tvar root = doc.createElement( \"result\" );\n\tvar keys = _.keys( schema );\n\n\tvalues.map( function( obj ) {\n\t\tvar row = doc.createElement( \"row\" );\n\t\tkeys.forEach( function( key ) {\n\t\t\tvar value = obj[ key ];\n\t\t\tif ( value !== null && value !== undefined ) {\n\t\t\t\trow.setAttribute( key, _.isDate( value ) ? value.toISOString() : value );\n\t\t\t}\n\t\t} );\n\t\treturn row;\n\t} )\n\t.forEach( root.appendChild.bind( root ) );\n\n\treturn xmlSerializer.serializeToString( root );\n}\n\nfunction createParameter( val, key ) {\n\tif ( typeof val !== \"object\" ) {\n\t\treturn {\n\t\t\tkey: key,\n\t\t\tvalue: val\n\t\t};\n\t}\n\n\t// for backward compatibility with boolean asTable\n\tif ( val.asTable === true ) {\n\t\tval.asTable = {\n\t\t\tvalue: val.type\n\t\t};\n\t\tval.val = val.val.map( function( x ) {\n\t\t\treturn { value: x };\n\t\t} );\n\t}\n\n\tif ( val.asTable ) {\n\t\treturn {\n\t\t\tkey: key + \"Xml\",\n\t\t\ttype: sql.NVarChar,\n\t\t\tvalue: toXml( val.val, val.asTable ),\n\t\t\tsqlPrefix: buildTableVariableSql( key, val.asTable )\n\t\t};\n\t}\n\treturn {\n\t\tkey: key,\n\t\ttype: val.type,\n\t\tvalue: val.val\n\t};\n}\n\nfunction nonPreparedSql( state, name, options ) {\n\tvar req = new sql.Request( state.transaction || state.connection );\n\treq.multiple = options.hasOwnProperty( \"multiple\" ) ? options.multiple : false;\n\n\tvar params = _.map( options.params, createParameter );\n\n\tparams.forEach( function( param ) {\n\t\t\tif ( param.type ) {\n\t\t\t\treq.input( param.key, param.type, param.value );\n\t\t\t} else {\n\t\t\t\treq.input( param.key, param.value );\n\t\t\t}\n\t\t} );\n\n\tvar operation = options.query ? \"query\" : \"execute\";\n\tvar prefix = _.pluck( params, \"sqlPrefix\" ).join( \"\" );\n\tvar sqlCmd = prefix + ( options.query || options.procedure );\n\n\tfunction op() {\n\t\tif ( !options.stream ) {\n\t\t\treturn lift( req[ operation ] ).bind( req )( sqlCmd );\n\t\t}\n\t\tvar stream;\n\t\treq.stream = true;\n\t\tstream = new DataResultStream( req );\n\t\treq[ operation ]( sqlCmd );\n\t\treturn when.resolve( stream );\n\t}\n\n\tif ( !state.metrics ) {\n\t\treturn op();\n\t}\n\n\treturn state.metrics.instrument(\n\t\t{\n\t\t\tkey: [ \"sql\", name ],\n\t\t\tnamespace: state.metricsNamespace,\n\t\t\tcall: op,\n\t\t\tsuccess: _.identity,\n\t\t\tfailure: _.identity\n\t\t}\n\t);\n}\n\nfunction preparedSql( state, name, options ) {\n\tvar cmd = new sql.PreparedStatement( state.transaction || state.connection );\n\tcmd.multiple = options.hasOwnProperty( \"multiple\" ) ? options.multiple : false;\n\n\tvar params = _.map( options.params, createParameter );\n\n\tvar paramKeyValues = {};\n\tparams.forEach( function( param ) {\n\t\tcmd.input( param.key, param.type );\n\t\tparamKeyValues[ param.key ] = param.value;\n\t} );\n\n\tvar prepare = lift( cmd.prepare ).bind( cmd );\n\tvar execute = lift( cmd.execute ).bind( cmd );\n\tvar unprepare = lift( cmd.unprepare ).bind( cmd );\n\tvar prefix = _.pluck( params, \"sqlPrefix\" ).join( \"\" );\n\tvar statement = prefix + options.preparedSql;\n\n\tfunction op() {\n\t\treturn prepare( statement )\n\t\t\t.then( function() {\n\t\t\t\tif ( options.stream ) {\n\t\t\t\t\tcmd.stream = true;\n\n\t\t\t\t\t// Can't use the lifted execute here because we need the\n\t\t\t\t\t// request returned by the original callback version, which the\n\t\t\t\t\t// lift would replace with a promise.\n\t\t\t\t\tvar req = cmd.execute( paramKeyValues, _.noop );\n\t\t\t\t\tvar stream = new DataResultStream( req );\n\t\t\t\t\tstream.on( \"end\", unprepare );\n\t\t\t\t\treturn when.resolve( stream );\n\t\t\t\t}\n\t\t\t\treturn execute( paramKeyValues )\n\t\t\t\t\t.then( function( result ) {\n\t\t\t\t\t\treturn unprepare()\n\t\t\t\t\t\t\t.then( function() {\n\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t}, function( err ) {\n\t\t\t\t\t\treturn unprepare()\n\t\t\t\t\t\t\t.then( function() {\n\t\t\t\t\t\t\t\tthrow err;\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t} );\n\t\t\t} );\n\t}\n\n\tif ( !state.metrics ) {\n\t\treturn op();\n\t}\n\n\treturn state.metrics.instrument(\n\t\t{\n\t\t\tkey: [ \"sql\", name ],\n\t\t\tnamespace: state.metricsNamespace,\n\t\t\tcall: op,\n\t\t\tsuccess: _.identity,\n\t\t\tfailure: _.identity\n\t\t}\n\t);\n}\n\nfunction executeSql( state, name, options ) {\n\tif ( options.query || options.procedure ) {\n\t\treturn nonPreparedSql( state, name, options );\n\t} else {\n\t\treturn preparedSql( state, name, options );\n\t}\n}\n\nfunction addState( fsm, name, stepAction ) {\n\tif ( fsm.states[ name ] ) {\n\t\tthrow new Error( \"A step by that name already exists: \" + fsm.instance );\n\t}\n\n\tfsm.pipeline.push( name );\n\tfsm.states[ name ] = {\n\t\t_onEnter: function() {\n\t\t\tvar promise;\n\t\t\tvar exec = function( options ) {\n\t\t\t\tpromise = executeSql( fsm, name, options );\n\t\t\t\treturn promise;\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tvar stepReturnValue = stepAction.call(\n\t\t\t\t\tfsm,\n\t\t\t\t\texec,\n\t\t\t\t\tfsm.results\n\t\t\t\t);\n\n\t\t\t\twhen( stepReturnValue )\n\t\t\t\t\t.then( function( result ) {\n\t\t\t\t\t\treturn when( promise ) // We'll not force the caller to return the execute promise\n\t\t\t\t\t\t\t.then( function( promiseResult ) {\n\t\t\t\t\t\t\t\treturn result || promiseResult;\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t} )\n\t\t\t\t\t.then( fsm.handle.bind( fsm, \"success\" ), fsm.handle.bind( fsm, \"error\" ) ) ;\n\t\t\t} catch ( err ) {\n\t\t\t\tfsm.handle( \"error\", err );\n\t\t\t}\n\t\t},\n\t\tsuccess: function( result ) {\n\t\t\tfsm.results[ name ] = result;\n\t\t\tfsm.emit( \"data\", result );\n\t\t\tfsm.nextState();\n\t\t},\n\t\terror: errorHandler\n\t};\n}\n\nmodule.exports = function() {\n\tvar SqlContext = machina.Fsm.extend( {\n\t\t_connected: function( connection ) {\n\t\t\tthis.connection = connection;\n\t\t\tthis.handle( \"success\" );\n\t\t},\n\n\t\t_connectionError: function( err ) {\n\t\t\tthis.handle( \"error\", err );\n\t\t},\n\n\t\tinitialState: \"uninitialized\",\n\n\t\tinitialize: function( options ) {\n\t\t\tthis.results = {};\n\t\t\tthis.pipeline = [];\n\t\t\tthis.pipePos = -1;\n\t\t\tthis.metrics = options.metrics;\n\t\t\tthis.metricsNamespace = options.namespace;\n\t\t\toptions.connection\n\t\t\t\t.then(\n\t\t\t\t\tthis._connected.bind( this ),\n\t\t\t\t\tthis._connectionError.bind( this )\n\t\t\t\t);\n\t\t},\n\n\t\tnextState: function() {\n\t\t\tthis.pipePos += 1;\n\t\t\tvar nextState = this.pipeline[ this.pipePos ] || \"done\";\n\t\t\tthis.transition( nextState );\n\t\t},\n\n\t\tstates: {\n\t\t\tuninitialized: {\n\t\t\t\tstart: \"connecting\",\n\t\t\t\t\"*\": function() {\n\t\t\t\t\tthis.deferUntilTransition( \"connecting\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\tconnecting: {\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tthis.nextState();\n\t\t\t\t},\n\t\t\t\terror: function( err ) {\n\t\t\t\t\tthis.err = err;\n\t\t\t\t\tthis.transition( \"error\" );\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tdone: {\n\t\t\t\t_onEnter: function() {\n\t\t\t\t\tthis.emit( \"end\", this.results );\n\t\t\t\t}\n\t\t\t},\n\n\t\t\terror: {\n\t\t\t\t_onEnter: function() {\n\t\t\t\t\tvar precedingErrorMessage = _.map( this.err && this.err.precedingErrors, function( error ) {\n\t\t\t\t\t\treturn \"\\n\\tPreceding error: \" + error.message;\n\t\t\t\t\t} ).join( \"\" );\n\n\t\t\t\t\tvar message = util.format( \"SqlContext Error. Failed on step \\\"%s\\\" with: \\\"%s\\\"%s\", this.priorState, this.err.message, precedingErrorMessage );\n\t\t\t\t\tlog.error( message );\n\t\t\t\t\tthis.err.message = message;\n\t\t\t\t\tthis.err.step = this.priorState;\n\t\t\t\t\tthis.emit( \"error\", this.err );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tstep: function( alias, stepAction ) {\n\t\t\tvar opt;\n\t\t\tif ( typeof stepAction === \"object\" ) {\n\t\t\t\topt = stepAction;\n\t\t\t\tstepAction = function( execute ) {\n\t\t\t\t\treturn execute( opt );\n\t\t\t\t};\n\t\t\t}\n\t\t\taddState( this, alias, stepAction );\n\t\t\treturn this;\n\t\t},\n\n\t\tdeferredStart: function() {\n\t\t\tif ( !this._started ) {\n\t\t\t\tprocess.nextTick( function() {\n\t\t\t\t\tthis.handle( \"start\" );\n\t\t\t\t}.bind( this ) );\n\t\t\t\tthis._started = true;\n\t\t\t}\n\t\t},\n\n\t\tend: function( fn ) {\n\t\t\tthis.on( \"end\", fn );\n\t\t\tthis.deferredStart();\n\t\t\treturn this;\n\t\t},\n\n\t\terror: function( fn ) {\n\t\t\tthis.on( \"error\", fn );\n\t\t\tthis.deferredStart();\n\t\t\treturn this;\n\t\t},\n\n\t\tthen: function( success, failure ) {\n\t\t\tvar deferred = when.defer();\n\t\t\tfunction onSuccess( result ) {\n\t\t\t\tdeferred.resolve( result );\n\t\t\t}\n\t\t\tfunction onFailure( error ) {\n\t\t\t\tdeferred.reject( error );\n\t\t\t}\n\n\t\t\tthis.end( onSuccess );\n\t\t\tthis.error( onFailure );\n\n\t\t\treturn deferred.promise\n\t\t\t\t.then( success, failure );\n\t\t},\n\n\t\tabort: function() {\n\t\t\tthis.handle( \"error\", \"Operation aborted\" );\n\t\t}\n\n\t} );\n\n\tMonologue.mixInto( SqlContext );\n\n\treturn SqlContext;\n};\n","/home/travis/build/npmtest/node-npmtest-seriate/node_modules/seriate/src/utils.js":"var _ = require( \"lodash\" );\nvar fs = require( \"fs\" );\nvar path = require( \"path\" );\nvar callsite = require( \"callsite\" );\n\nvar fileCache = {};\n\nfunction isAbsolutePath( p ) {\n\treturn path.resolve( p ) === path.normalize( p ).replace( /(.+)([\\/|\\\\])$/, \"$1\" );\n}\n\nfunction _getFilePath( p ) {\n\t// If we're not dealing with an absolute path, then we\n\t// need to get the *calling* code's directory, since\n\t// the sql file is being referenced relative to that location\n\tif ( !isAbsolutePath( p ) ) {\n\t\tvar stack = callsite();\n\t\tvar requester = stack[ 2 ].getFileName();\n\t\tp = path.join( path.dirname( requester ), p );\n\t}\n\treturn p;\n}\n\nmodule.exports = {\n\tfromFile: function( p ) {\n\t\tp = _getFilePath( p );\n\t\tvar ext = path.extname( p );\n\t\tp = ( ext === \".\" ) ? ( p + \"sql\" ) : ( ext.length === 0 ) ? p + \".sql\" : p;\n\t\tvar content = fileCache[ p ];\n\t\tif ( _.isEmpty( content ) ) {\n\t\t\tcontent = fs.readFileSync( p, { encoding: \"utf8\" } );\n\t\t\tfileCache[ p ] = content;\n\t\t}\n\t\treturn content;\n\t}\n};\n","/home/travis/build/npmtest/node-npmtest-seriate/node_modules/seriate/src/transactionContext.js":"var _ = require( \"lodash\" );\nvar when = require( \"when\" );\nvar util = require( \"util\" );\nvar log = require( \"./log\" )( \"seriate.transaction\" );\nvar sql = require( \"mssql\" );\n\nfunction errorHandler( err ) {\n\tthis.err = err;\n\tthis.transition( \"error\" );\n}\n\nmodule.exports = function( SqlContext ) {\n\tvar TransactionContext = SqlContext.extend( {\n\t\tstates: {\n\t\t\tconnecting: {\n\t\t\t\tsuccess: \"startingTransaction\"\n\t\t\t},\n\t\t\tstartingTransaction: {\n\t\t\t\t_onEnter: function() {\n\t\t\t\t\tvar args = [ function( err ) {\n\t\t\t\t\t\tif ( err ) {\n\t\t\t\t\t\t\tthis.handle( \"error\", err );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.handle( \"success\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}.bind( this ) ];\n\n\t\t\t\t\tif ( this.isolationLevel ) {\n\t\t\t\t\t\tvar isolationLevel = this.isolationLevel;\n\t\t\t\t\t\tif ( _.isString( this.isolationLevel ) ) {\n\t\t\t\t\t\t\tisolationLevel = sql.ISOLATION_LEVEL[ this.isolationLevel.toUpperCase() ];\n\t\t\t\t\t\t\tif ( isolationLevel === undefined ) {\n\t\t\t\t\t\t\t\tvar err = new Error( \"Unknown isolation level: \\\"\" + this.isolationLevel + \"\\\"\" );\n\t\t\t\t\t\t\t\tthis.handle( \"error\", err );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\targs.unshift( isolationLevel );\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.transaction = this.transaction || new sql.Transaction( this.connection );\n\t\t\t\t\tthis.transaction.begin.apply( this.transaction, args );\n\t\t\t\t},\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tthis.nextState();\n\t\t\t\t},\n\t\t\t\terror: errorHandler\n\t\t\t},\n\t\t\tdone: {\n\t\t\t\t_onEnter: function() {\n\t\t\t\t\tvar self = this;\n\t\t\t\t\tself.emit( \"end\", {\n\t\t\t\t\t\tsets: self.results,\n\t\t\t\t\t\ttransaction: {\n\t\t\t\t\t\t\tcommit: function() {\n\t\t\t\t\t\t\t\treturn when.promise( function( resolve, reject ) {\n\t\t\t\t\t\t\t\t\tself.transaction.commit( function( commitError ) {\n\t\t\t\t\t\t\t\t\t\tif ( commitError ) {\n\t\t\t\t\t\t\t\t\t\t\tself.transaction.rollback( function( rollbackErr ) {\n\t\t\t\t\t\t\t\t\t\t\t\tif ( rollbackErr ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar message = util.format( \"Error occurred during automatic roll back after a commit error.\\n\\tCommit error: %s\\n\\tRollback error: %s\\n\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcommitError,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trollbackErr );\n\t\t\t\t\t\t\t\t\t\t\t\t\tlog.error( message );\n\t\t\t\t\t\t\t\t\t\t\t\t\treject( new Error( message ) );\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\treject( commitError );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\trollback: function() {\n\t\t\t\t\t\t\t\treturn when.promise( function( resolve, reject ) {\n\t\t\t\t\t\t\t\t\tself.transaction.rollback( function( err ) {\n\t\t\t\t\t\t\t\t\t\tif ( err ) {\n\t\t\t\t\t\t\t\t\t\t\tlog.error( \"Error occurred while rolling back: %s\", err.message );\n\t\t\t\t\t\t\t\t\t\t\treject( err );\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t},\n\t\t\terror: {\n\t\t\t\t_onEnter: function() {\n\t\t\t\t\tvar precedingErrorMessage = _.map( this.err && this.err.precedingErrors, function( error ) {\n\t\t\t\t\t\treturn \"\\n\\tPreceding error: \" + error.message;\n\t\t\t\t\t} ).join( \"\" );\n\n\t\t\t\t\tvar message = util.format( \"TransactionContext Error. Failed on step \\\"%s\\\" with: \\\"%s\\\"%s\", this.priorState, this.err.message, precedingErrorMessage );\n\t\t\t\t\tthis.err.message = message;\n\t\t\t\t\tthis.err.step = this.priorState;\n\n\t\t\t\t\tif ( this.transaction ) {\n\t\t\t\t\t\tthis.transaction.rollback( function( rollbackErr ) {\n\t\t\t\t\t\t\tif ( rollbackErr ) {\n\t\t\t\t\t\t\t\tmessage = util.format( \"Error occurred during automatic roll back after error on transaction on step %s.\\n\\tTransaction error: %s\\n\\tRollback error: %s\\n\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.priorState,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.err.message,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trollbackErr );\n\t\t\t\t\t\t\t\tthis.err.message = message;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlog.error( message );\n\t\t\t\t\t\t\tthis.emit( \"error\", this.err );\n\t\t\t\t\t\t}.bind( this ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlog.error( message );\n\t\t\t\t\t\tthis.emit( \"error\", this.err );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} );\n\n\treturn TransactionContext;\n};\n"}